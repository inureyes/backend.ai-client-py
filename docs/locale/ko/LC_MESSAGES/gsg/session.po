# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2018, Lablup Inc.
# This file is distributed under the same license as the Backend.AI Client
# SDK for Python package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Backend.AI Client SDK for Python 18.12\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-12-17 15:51+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 9e5edaf7ddcd4ea5bfec00bb32d2f986
#: ../../gsg/session.rst:2
msgid "Client Session"
msgstr "클라이언트 세션"

# 9ee2e82d338245cb95667feed28705f0
#: ../../gsg/session.rst:7
msgid ""
"This module is the first place to begin with your Python programs that "
"use Backend.AI API functions."
msgstr ""

# 86006e2b4f3e4dd58b75013c30dde04d
#: ../../gsg/session.rst:10
msgid ""
"The high-level API functions cannot be used alone -- you must initiate a "
"client session first because each session provides *proxy attributes* "
"that represent API functions and run on the session itself."
msgstr ""

# 9febfb7b1f04423cb58b86edc570073a
#: ../../gsg/session.rst:14
msgid ""
"To achieve this, during initialization session objects internally "
"construct new types by combining the "
":class:`~ai.backend.client.base.BaseFunction` class with the attributes "
"in each API function classes, and makes the new types bound to itself. "
"Creating new types every time when creating a new session instance may "
"look weird, but it is the most convenient way to provide *class-methods* "
"in the API function classes to work with specific *session instances*."
msgstr ""

# c6bb0415101e450e81615b45d45539b5
#: ../../gsg/session.rst:21
msgid ""
"When designing your application, please note that session objects are "
"intended to live long following the process' lifecycle, instead of to be "
"created and disposed whenever making API requests."
msgstr ""

# 331da50671a34cd2991091009a2fe88a
#: ai.backend.client.session.BaseSession:1 of
msgid "The base abstract class for sessions."
msgstr ""

# af5b55846c5240dcb8ecba100f10f9ca
# f4685d5b31d64e268429bfd606f1c9b9
#: ai.backend.client.session.AsyncSession.close:1
#: ai.backend.client.session.BaseSession.close:1 of
msgid "Terminates the session and releases underlying resources."
msgstr ""

# 39ff5b383bb54ee7b870cfb9aac091c6
#: ai.backend.client.session.BaseSession.closed:1 of
msgid "Checks if the session is closed."
msgstr ""

# 441fe72975a3472aa9d0c90ba9366dab
#: ai.backend.client.session.BaseSession.closed of
msgid "Return type"
msgstr ""

# 3451d36cc67f4f09b1e2576a11010d68
#: ai.backend.client.session.BaseSession.closed:4 of
msgid ":py:class:`bool`"
msgstr ""

# 2b6d9374ddc0428095ff6d4863b512c3
#: ai.backend.client.session.BaseSession.config:1 of
msgid "The configuration used by this session object."
msgstr ""

# a1c7f6ef5604471f8224fbcf04587c48
#: ai.backend.client.session.Session:1 of
msgid ""
"An API client session that makes API requests synchronously. You may call"
" (almost) all function proxy methods like a plain Python function. It "
"provides a context manager interface to ensure closing of the session "
"upon errors and scope exits."
msgstr ""

# 22f7f902a8304b17a481e65b06b769d2
# f12b44f98274470d96e7c5e8426305eb
#: ai.backend.client.session.AsyncSession.Admin:1
#: ai.backend.client.session.Session.Admin:1 of
msgid ""
"The :class:`~ai.backend.client.admin.Admin` function proxy bound to this "
"session."
msgstr ""

# 055bdf8dbc5a453f82ce2d83104ca18b
# b9937e3054eb411f922a4016ddc8e17a
#: ai.backend.client.session.AsyncSession.Agent:1
#: ai.backend.client.session.Session.Agent:1 of
msgid ""
"The :class:`~ai.backend.client.agent.Agent` function proxy bound to this "
"session."
msgstr ""

# abe77fd933ea46e192a500548a92aa1a
# 0cffe08f18f84f52a69c12e418d95b77
#: ai.backend.client.session.AsyncSession.Kernel:1
#: ai.backend.client.session.Session.Kernel:1 of
msgid ""
"The :class:`~ai.backend.client.kernel.Kernel` function proxy bound to "
"this session."
msgstr ""

# 7b07f4bed0d84401a8430e27a282e6eb
# 9dfe4a4f214e4ed6be15a3fea7bf35af
#: ai.backend.client.session.AsyncSession.KeyPair:1
#: ai.backend.client.session.Session.KeyPair:1 of
msgid ""
"The :class:`~ai.backend.client.keypair.KeyPair` function proxy bound to "
"this session."
msgstr ""

# d9d84738395e4009afa55d05b2e1ff02
# 1749c5cc260f42209f386f5850171094
#: ai.backend.client.session.AsyncSession.Manager:1
#: ai.backend.client.session.Session.Manager:1 of
msgid ""
"The :class:`~ai.backend.client.manager.Manager` function proxy bound to "
"this session."
msgstr ""

# 73faa382b0b444faa77809e81a04be67
# cb61699e59f440ebad1413aab7c5d772
#: ai.backend.client.session.AsyncSession.VFolder:1
#: ai.backend.client.session.Session.VFolder:1 of
msgid ""
"The :class:`~ai.backend.client.vfolder.VFolder` function proxy bound to "
"this session."
msgstr ""

# 992c5b5d54c543c6b07898be71a96072
#: ai.backend.client.session.Session.close:1 of
msgid ""
"Terminates the session.  It schedules the ``close()`` coroutine of the "
"underlying aiohttp session and then enqueues a sentinel object to "
"indicate termination.  Then it waits until the worker thread to self-"
"terminate by joining."
msgstr ""

# e57aae52fd3c4e3eaac38e5780043877
#: ai.backend.client.session.Session.worker_thread:1 of
msgid ""
"The thread that internally executes the asynchronous implementations of "
"the given API functions."
msgstr ""

# 20b346e85e104f748106fd9c4bd0a872
#: ai.backend.client.session.AsyncSession:1 of
msgid ""
"An API client session that makes API requests asynchronously using "
"coroutines. You may call all function proxy methods like a coroutine. It "
"provides an async context manager interface to ensure closing of the "
"session upon errors and scope exits."
msgstr ""

